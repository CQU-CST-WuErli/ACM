// SOJ 表达式.cpp : 定义控制台应用程序的入口点。
//
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<fstream>
#include<iomanip>
using namespace std;
ofstream cfout("lists.txt");
int t;
int n;
/*
const int INF = 0x3f3f3f3f;
const int MAXN = 4e3 + 10;
int maxd;
bool vis[MAXN];
int number[MAXN];
int tn;
int countH(int u){//对当前状态进行估价
	//找到最大存在的数并乘2
	int maxs = 0;
	int cases = 0;
	for (int i = 0; i < tn; ++i){
		maxs = max(maxs, number[i]);
	}
	while (u < n){
		++cases;
		u += maxs;
		maxs = u;
	}
	return cases - 1;
}
int getMax(int u){
	int tt = 0;
	while (u){
		++tt;
		u /= 2;
	}
	if (tt == 0)return 4;
	return 1 << (tt - 1);
}
bool dfs(int u, int t){
	if (u == n)return true;
	//if (u > getMax(n))return false;
	if (t > maxd)return false;
	for (int ti = tn - 1; ti >= 0; --ti){
		for (int tk = -1; tk <= 1; tk += 2){
			int i = number[ti] * tk;
			if (u + i < 0 || u + i > 1024)continue;
			if (vis[u + i])continue;
			number[tn++] = u + i;
			vis[u + i] = true;
			if (u + i == n)return true;
			if (countH(u) + t <= maxd)
				if (dfs(u + i, t + 1))return true;
			--tn;
			vis[u + i] = false;
		}
	}
	return false;
}*/
int dis[] = { 1,
0, 1, 2, 2, 3, 3, 4, 3, 4, 4,
5, 4, 5, 5, 5, 4, 5, 5, 6, 5,
6, 6, 6, 5, 6, 6, 6, 6, 7, 6,
6, 5, 6, 6, 7, 6, 7, 7, 7, 6,
7, 7, 7, 7, 7, 7, 7, 6, 7, 7,
7, 7, 8, 7, 8, 7, 8, 8, 8, 7,
8, 7, 7, 6, 7, 7, 8, 7, 8, 8,
8, 7, 8, 8, 8, 8, 8, 8, 8, 7,
8, 8, 8, 8, 8, 8, 9, 8, 9, 8,
9, 8, 8, 8, 8, 7, 8, 8, 8, 8,

9, 8, 9, 8, 9, 9, 9, 8, 9, 9,
9, 8, 9, 9, 9, 9, 9, 9, 9, 8,
9, 9, 9, 8, 9, 8, 8, 7, 8, 8,
9, 8, 9, 9, 9, 8, 9, 9, 9, 9,
9, 9, 9, 8, 9, 9, 9, 9, 9, 9,
10, 9, 9, 9, 9, 9, 9, 9, 9, 8,
9, 9, 9, 9, 9, 9, 10, 9, 10, 9,
10, 9, 10, 10, 10, 9, 10, 10, 10, 9,
10, 10, 10, 9, 10, 9, 10, 9, 9, 9,
9, 8, 9, 9, 9, 9, 10, 9, 10, 9,

10, 10, 10, 9, 10, 10, 10, 9, 10, 10,
10, 10, 10, 10, 10, 9, 10, 10, 10, 10,
10, 10, 10, 9, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10, 9,
10, 10, 10, 10, 10, 10, 10, 9, 10, 10,
10, 9, 10, 9, 9, 8, 9, 9, 10, 9,
10, 10, 10, 9, 10, 10, 11, 10, 11, 10,
10, 9, 10, 10, 11, 10, 11, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 9, 10, 10,
10, 10, 10, 10, 11, 10, 10, 10, 11, 10,

11, 11, 11, 10, 11, 10, 11, 10, 11, 10,
11, 10, 11, 10, 10, 10, 10, 10, 10, 9,
10, 10, 10, 10, 10, 10, 11, 10, 11, 10,
11, 10, 11, 11, 11, 10, 11, 11, 11, 10,
11, 11, 11, 10, 11, 11, 11, 11, 11, 11,
11, 10, 11, 11, 11, 11, 11, 11, 11, 10,
11, 11, 11, 11, 11, 11, 11, 10, 11, 11,
11, 10, 11, 11, 11, 10, 11, 10, 11, 10,
10, 10, 10, 9, 10, 10, 10, 10, 11, 10,
11, 10, 11, 11, 11, 10, 11, 11, 11, 10,

11, 11, 11, 11, 11, 11, 11, 10, 11, 11,
11, 11, 11, 11, 11, 10, 11, 11, 11, 11,
11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
11, 10, 11, 11, 11, 11, 11, 11, 11, 11,
11, 11, 11, 11, 11, 11, 11, 10, 11, 11,
11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
12, 11, 12, 11, 11, 11, 12, 11, 12, 11,
11, 11, 11, 11, 11, 11, 11, 11, 11, 10,
11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
12, 11, 12, 11, 11, 10, 11, 11, 12, 11,

12, 11, 11, 10, 11, 11, 11, 10, 11, 10,
10, 9, 10, 10, 11, 10, 11, 11, 11, 10,
11, 11, 12, 11, 12, 11, 11, 10, 11, 11,
12, 11, 12, 12, 11, 11, 12, 12, 12, 11,
12, 11, 11, 10, 11, 11, 12, 11, 12, 12,
12, 11, 11, 12, 12, 11, 12, 11, 12, 11,
11, 11, 12, 11, 12, 11, 11, 11, 12, 11,
11, 11, 11, 11, 11, 10, 11, 11, 11, 11,
11, 11, 12, 11, 11, 11, 12, 11, 12, 12,
12, 11, 12, 11, 12, 11, 12, 12, 12, 11,

12, 12, 12, 12, 12, 12, 12, 11, 12, 12,
12, 11, 12, 12, 12, 11, 12, 12, 12, 11,
12, 12, 12, 11, 12, 12, 12, 11, 12, 11,
12, 11, 12, 11, 11, 11, 11, 11, 11, 10,
11, 11, 11, 11, 11, 11, 12, 11, 12, 11,
12, 11, 12, 12, 12, 11, 12, 12, 12, 11,
12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
12, 11, 12, 12, 12, 12, 12, 12, 12, 11,
12, 12, 12, 12, 12, 12, 12, 11, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12,

12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 11,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 11, 12, 12, 12, 12,
12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
12, 11, 12, 12, 12, 11, 12, 12, 12, 11,
12, 11, 12, 11, 11, 11, 11, 10, 11, 11,
11, 11, 12, 11, 12, 11, 12, 12, 12, 11,
12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
12, 11, 12, 12, 12, 12, 12, 12, 12, 11,

12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
13, 12, 12, 12, 12, 11, 12, 12, 12, 12,
13, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 11, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 13, 12, 12, 12,
13, 12, 13, 12, 12, 12, 13, 12, 12, 12,
12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
13, 12, 12, 12, 13, 12, 13, 12, 12, 12,
13, 12, 13, 12, 13, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 11, 12, 12, 12, 12,


12, 12, 12, 12, 12, 12, 13, 12, 13, 12,
13, 12, 13, 12, 13, 12, 13, 12, 13, 12,
13, 13, 13, 12, 13, 13, 13, 12, 13, 12,
13, 12, 13, 13, 13, 12, 13, 13, 13, 12,
13, 12, 13, 12, 12, 12, 13, 12, 13, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 11,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
13, 12, 13, 12, 12, 12, 12, 12, 13, 12,
13, 13, 13, 12, 13, 13, 13, 12, 13, 12,
12, 11, 12, 12, 13, 12, 13, 13, 13, 12
};
int main(){
	int t;
	cin >> t;
	while (t--){
		cin >> n;
		cout << dis[n] << endl;
	}
	return 0;
}