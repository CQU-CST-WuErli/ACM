线段树：区间更新查找二叉树
记录节点：struct Nodes{
		int l,r;
		int max;
		int flag;
		}a[maxn];

查找：
int ans=maxint;
void query(int l,int r,int id)
{
	if (l>a[id].r || r<a[id].l) return ;
	if (ans<a[id].max){
		ans=a[id].max;
		return;
	}
	if (flag==1) {
		a[id].flag=0;
		a[id*2].max=a[id].max;
		a[id*2+1].max=a[id].max;
		a[id*2].flag=a[id*2+1].flag=1;
	}
	query(1,r,id*2);
	query(l,r,id*2+1);
	a[id].max=max(a[id*2].max,a[id*2+1].max);
}

建树：
void build(int l,int r,int id)
{
	if (l>r) return;
	a[id].l=l;a[id].r=r;a[id].flag=0;
	if (l==r) {
		a[id].max=num[l];
		return;
	}
	biuld(l,(l+r)/2,id*2);
	build((l+r)/2+1,r,id*2+1);
	a[id].max=max(a[id*2].max,a[id*2+1].max);
}
更新：
void update(int l,int r,int y,int id)
{
	if (l>a[id}.r || r<a[id].l)  return;
	if (l<=a[id].l && r>=a[id].r){
		a[id].max=y;
		a[id].flag=1;
		return;
	}
	if (a[id].flag==1){
		a[id*2+1].flag=a[id*2].flag=1;
		
	
	up左;
	up右;
	a[id].max=max([id*2].max,a[id*2+1].max);
}	